## Cluster setup

Raise your host's ulimits for ElasticSearch to handle high I/O :

```bash
sudo sysctl -w vm.max_map_count=512000
# Persist this setting in `/etc/sysctl.conf` and execute `sysctl -p`
```

Now, we will generate the certificates for the cluster :

```bash
# You may want to edit the OPENDISTRO_DN variable first
bash generate-certs.sh
```

Start the cluster :

```bash
docker-compose up -d
```

Wait about 30 seconds and run `securityadmin` to initialize the security plugin :

```bash
docker-compose exec os01 bash -c "chmod +x plugins/opensearch-security/tools/securityadmin.sh && bash plugins/opensearch-security/tools/securityadmin.sh -cd config/opensearch-security -icl -nhnv -cacert config/certificates/ca/ca.pem -cert config/certificates/ca/admin.pem -key config/certificates/ca/admin.key -h localhost"
```

> Find all the configuration files in the container's `/usr/share/opensearch/config/opensearch-security` directory. You might want to [mount them as volumes](https://opendistro.github.io/for-elasticsearch-docs/docs/install/docker-security/).

Access OpenSearch Dashboards through [https://localhost:5601](https://localhost:5601)

Default username is `admin` and password is `admin`

> Take a look at [OpenSearch's internal users documentation](https://opensearch.org/docs/security-plugin/configuration/yaml/) to add, remove or update a user.


AM eliminat secÈ›iunea de setup:

```yml
  setup:
    image: opensearchproject/opensearch:${OPEN_SEARCH_VERSION}
    volumes:
      - ./assets/opensearch/certs:/usr/share/opensearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${OPEN_SEARCH_PASSWORD} == x ]; then
          echo "Set the OPEN_SEARCH_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/root-ca.pem ]; then
          echo "Creating certificates";
          bin/certs/opensearch_local_certificates_creator.sh
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for OpenSearch availability";
        until curl -s --cacert config/certs/root-ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f certs/os01.pem ]"]
      interval: 1s
      timeout: 5s
      retries: 120
    networks:
      - osearch
```


Eroarea `Exception in thread "main" java.nio.file.NoSuchFileException: /usr/share/opensearch/config/jvm.options`

https://stackoverflow.com/questions/65295961/elasticsearch-server-with-docker-compose-java-nio-file-accessdeniedexception


sudo chown -R 1000:root 




https://stackoverflow.com/questions/36884991/how-to-rebuild-docker-container-in-docker-compose-yml
docker-compose up --build <service_name>
docker-compose build --no-cache when you want to build from the first level

https://docs.docker.com/reference/cli/docker/compose/up/

docker compose up -d --no-deps --build <service_name>
--no-deps - Don't start linked services.

--build - Build images before starting containers


docker-compose up --build --force-recreate --no-deps [-d] [<service_name>..]




Without cache
To force a rebuild to ignore cached layers, we have to first build a new image

docker-compose build --no-cache [<service_name>..]
From the help menu

Options:
    --force-rm              Always remove intermediate containers.
    -m, --memory MEM        Set memory limit for the build container.
    --no-cache              Do not use cache when building the image.
    --no-rm                 Do not remove intermediate containers after a successful build.
Then recreate the container

docker-compose up --force-recreate --no-deps [-d] [<service_name>..]


You can rebuild only one container by appending it's name to the end of the command. docker-compose up -d --force-recreate --build container_name








https://forum.opensearch.org/t/beginners-issue-improperly-formatted-jvm-option/17192/2

